// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
  // Further reading: 
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id String @id @default(auto()) @map("_id") @db.ObjectId
}

// Necessary for Next auth
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? //@db.Text
  access_token      String? //@db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? //@db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  discordName   String?   @unique
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  authoredCalendarEntries  CalendarEntry[] @relation("authoredCalendarEntries")
  receivedCalendarEntryIds String[]        @db.ObjectId
  receivedCalendarEntries  CalendarEntry[] @relation("receivedCalendarEntries", fields: [receivedCalendarEntryIds], references: [id])

  leaderedTeamIds String[] @db.ObjectId
  leaderedTeams   Team[]   @relation("leaderedTeams", fields: [leaderedTeamIds], references: [id])
  teamIds         String[] @db.ObjectId
  teams           Team[]   @relation("teams", fields: [teamIds], references: [id])
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Team {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  name        String
  description String

  leadersIds String[] @db.ObjectId
  leaders    User[]   @relation("leaderedTeams", fields: [leadersIds], references: [id])

  usersIds String[] @db.ObjectId
  users    User[]   @relation("teams", fields: [usersIds], references: [id])
  roles    String[]
}

model CalendarEntry {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  endsAt      DateTime // utc time
  name        String
  description String

  authorUserId String
  author       User   @relation("authoredCalendarEntries", fields: [authorUserId], references: [id])

  receiversUserIds String[] @db.ObjectId
  receivers        User[]   @relation("receivedCalendarEntries", fields: [receiversUserIds], references: [id])
}
